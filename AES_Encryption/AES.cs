
using System.Text;
namespace AES_Encryption
{
    internal static class AES
    {
        // Method to convert text to Unicode matrix
        static int[,] TextToUnicode(string text)
        {
            int[,] textMatrix = new int[4, 4];

            for (int i = 0; i < 16; i++)
            {
                textMatrix[i / 4, i % 4] = (int)text[i];
            }

            return textMatrix;
        }

        // Function to convert Unicode matrix to text
        static string UnicodeToText(int[,] matrix)
        {
            StringBuilder text = new StringBuilder();
            for (int i = 0; i < 16; i++)
            {
                text.Append((char)matrix[i / 4, i % 4]);
            }
            return text.ToString();
        }

        // Method to substitute bytes using Rijndael S-box
        static int[,] SubBytes(int[,] A)
        {
            int[,] sBox = LoadSBox();
            int[,] B = new int[4, 4];
            for (int row = 0; row < 4; row++)
            {
                for (int col = 0; col < 4; col++)
                {
                    int subRow = A[row, col] / 16;
                    int subCol = A[row, col] % 16;
                    B[row, col] = sBox[subRow, subCol];
                }
            }
            return B;
        }

        // Method to load S-box (Rijndael)
        static int[,] LoadSBox()
        {
            int[,] sBox = new int[16, 16] {
        {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
        {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
        {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
        {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
        {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
        {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
        {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
        {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
        {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
        {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
        {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
        {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
        {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
        {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
        {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
        {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}
    };
            return sBox;
        }

        // Method to shift rows
        static int[,] ShiftRows(int[,] A)
        {
            int[,] B = new int[4, 4];
            B[0, 0] = A[0, 0];
            B[0, 1] = A[0, 1];
            B[0, 2] = A[0, 2];
            B[0, 3] = A[0, 3];

            B[1, 0] = A[1, 1];
            B[1, 1] = A[1, 2];
            B[1, 2] = A[1, 3];
            B[1, 3] = A[1, 0];

            B[2, 0] = A[2, 2];
            B[2, 1] = A[2, 3];
            B[2, 2] = A[2, 0];
            B[2, 3] = A[2, 1];

            B[3, 0] = A[3, 3];
            B[3, 1] = A[3, 0];
            B[3, 2] = A[3, 1];
            B[3, 3] = A[3, 2];

            return B;
        }

        // Method to mix columns
        static int[,] MixColumns(int[,] A)
        {
            int[,] B = new int[4, 4];
            for (int col = 0; col < 4; col++)
            {
                B[0, col] = Multiply(0x02, A[0, col]) ^ Multiply(0x03, A[1, col]) ^ A[2, col] ^ A[3, col];
                B[1, col] = A[0, col] ^ Multiply(0x02, A[1, col]) ^ Multiply(0x03, A[2, col]) ^ A[3, col];
                B[2, col] = A[0, col] ^ A[1, col] ^ Multiply(0x02, A[2, col]) ^ Multiply(0x03, A[3, col]);
                B[3, col] = Multiply(0x03, A[0, col]) ^ A[1, col] ^ A[2, col] ^ Multiply(0x02, A[3, col]);
            }
            return B;
        }

        // Method to multiply two numbers in the Galois field
        static int Multiply(int a, int b)
        {
            int result = 0;
            while (b > 0)
            {
                if ((b & 1) != 0)
                {
                    result ^= a; // equivalent to result += a if we were in normal arithmetic
                }
                bool carry = (a & 0x80) != 0; // Check if MSB of a is set
                a <<= 1; // equivalent to a *= 2 if we were in normal arithmetic
                if (carry)
                {
                    a ^= 0x11B; // equivalent to a ^= 0x11B + 0x1B (carry) if we were in normal arithmetic
                }
                b >>= 1; // equivalent to b /= 2 if we were in normal arithmetic
            }
            return result;
        }

        // Method to add round key to text
        static int[,] AddRoundKey(int[,] A, int[,] key)
        {
            int[,] B = new int[4, 4];
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    B[i, j] = A[i, j] ^ key[i, j];
                }
            }
            return B;
        }

        // Main AES Encryption Method
        public static string AESEncrypt(string plainText, string key)
        {
            int[,] keyMatrix = TextToUnicode(key);
            int length = plainText.Length;
            StringBuilder cipherText = new StringBuilder();

            // Splitting plainText into substrings of length 16 each and adding whitespaces to shorter substrings
            for (int i = 0; i < length / 16; i++)
            {
                string subString = plainText.Substring(16 * i, 16);
                cipherText.Append(AESEncryptBlock(TextToUnicode(subString), keyMatrix));
            }

            if (length % 16 != 0)
            {
                string subString = plainText.Substring(16 * (length / 16));
                while (subString.Length < 16)
                {
                    subString += ' ';
                }
                cipherText.Append(AESEncryptBlock(TextToUnicode(subString), keyMatrix));
            }

            return cipherText.ToString();
        }

        // AES Encryption Block
        public static string AESEncryptBlock(int[,] block, int[,] key)
        {
            int[,] state = block;
            state = SubBytes(state);
            state = ShiftRows(state);
            state = MixColumns(state);
            state = AddRoundKey(state, key);
            return UnicodeToText(state);
        }


        // Main AES Decryption Method
        public static string AESDecrypt(string cipherText, string key)
        {
            int[,] keyMatrix = TextToUnicode(key);
            int length = cipherText.Length;
            StringBuilder decryptedText = new StringBuilder();

            // Splitting cipherText into substrings of length 16 each
            for (int i = 0; i < length / 16; i++)
            {
                string subString = cipherText.Substring(16 * i, 16);
                decryptedText.Append(AESDecryptBlock(TextToUnicode(subString), keyMatrix));
            }

            return decryptedText.ToString();
        }

        // AES Decryption Block
        static string AESDecryptBlock(int[,] block, int[,] key)
        {
            int[,] state = block;
            state = RemoveRoundKey(state, key);
            state = InvMixColumns(state);
            state = InvShiftRows(state);
            state = InvSubBytes(state);
            return UnicodeToText(state);
        }
        // Method to load Galois Field L Table
        static int[,] LoadLTable()
        {
            int[,] lTable = new int[16, 16] {
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
        {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f},
        {0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e},
        {0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11},
        {0x00, 0x04, 0x08, 0x0c, 0x10, 0x14, 0x18, 0x1c, 0x20, 0x24, 0x28, 0x2c, 0x30, 0x34, 0x38, 0x3c},
        {0x00, 0x05, 0x0a, 0x0f, 0x14, 0x11, 0x1e, 0x1b, 0x28, 0x2d, 0x22, 0x27, 0x3c, 0x39, 0x36, 0x33},
        {0x00, 0x06, 0x0c, 0x0a, 0x18, 0x1e, 0x14, 0x12, 0x30, 0x36, 0x3c, 0x3a, 0x28, 0x26, 0x2c, 0x2a},
        {0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d},
        {0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78},
        {0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77},
        {0x00, 0x0a, 0x14, 0x1e, 0x28, 0x22, 0x3c, 0x36, 0x50, 0x5a, 0x44, 0x4e, 0x78, 0x72, 0x6c, 0x66},
        {0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69},
        {0x00, 0x0c, 0x18, 0x14, 0x30, 0x3c, 0x28, 0x24, 0x60, 0x6c, 0x78, 0x74, 0x50, 0x5c, 0x48, 0x44},
        {0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b},
        {0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a},
        {0x00, 0x0f, 0x1e, 0x11, 0x3c, 0x33, 0x22, 0x2d, 0x78, 0x77, 0x66, 0x69, 0x54, 0x5b, 0x4a, 0x45}
            };
            return lTable;
        }


        // Method to restore mixed columns using Galois Field L Table (Inverse MixColumns)
        static int[,] InvMixColumns(int[,] A)
        {
            int[,] lTable = LoadLTable();
            int[,] B = new int[4, 4];
            for (int col = 0; col < 4; col++)
            {
                B[0, col] = Multiply(0x0E, A[0, col]) ^ Multiply(0x0B, A[1, col]) ^ Multiply(0x0D, A[2, col]) ^ Multiply(0x09, A[3, col]);
                B[1, col] = Multiply(0x09, A[0, col]) ^ Multiply(0x0E, A[1, col]) ^ Multiply(0x0B, A[2, col]) ^ Multiply(0x0D, A[3, col]);
                B[2, col] = Multiply(0x0D, A[0, col]) ^ Multiply(0x09, A[1, col]) ^ Multiply(0x0E, A[2, col]) ^ Multiply(0x0B, A[3, col]);
                B[3, col] = Multiply(0x0B, A[0, col]) ^ Multiply(0x0D, A[1, col]) ^ Multiply(0x09, A[2, col]) ^ Multiply(0x0E, A[3, col]);
            }
            return B;
        }

        // Method to restore shifted rows
        static int[,] InvShiftRows(int[,] A)
        {
            int[,] B = new int[4, 4];
            B[0, 0] = A[0, 0];
            B[0, 1] = A[0, 1];
            B[0, 2] = A[0, 2];
            B[0, 3] = A[0, 3];

            B[1, 0] = A[1, 3];
            B[1, 1] = A[1, 0];
            B[1, 2] = A[1, 1];
            B[1, 3] = A[1, 2];

            B[2, 0] = A[2, 2];
            B[2, 1] = A[2, 3];
            B[2, 2] = A[2, 0];
            B[2, 3] = A[2, 1];

            B[3, 0] = A[3, 1];
            B[3, 1] = A[3, 2];
            B[3, 2] = A[3, 3];
            B[3, 3] = A[3, 0];

            return B;
        }

        // Method to substitute bytes using inverse Rijndael S-box
        static int[,] InvSubBytes(int[,] A)
        {
            int[,] invSBox = LoadInvSBox();
            int[,] B = new int[4, 4];
            for (int row = 0; row < 4; row++)
            {
                for (int col = 0; col < 4; col++)
                {
                    int subRow = A[row, col] / 16;
                    int subCol = A[row, col] % 16;
                    B[row, col] = invSBox[subRow, subCol];
                }
            }
            return B;
        }

        // Method to load inverse S-box (Rijndael)
        static int[,] LoadInvSBox()
        {
            int[,] invSBox = new int[16, 16] {
        {0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
        {0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
        {0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
        {0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
        {0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
        {0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
        {0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
        {0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
        {0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
        {0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
        {0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
        {0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
        {0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
        {0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
        {0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
        {0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}
    };
            return invSBox;
        }

        // Method to remove round key from text
        static int[,] RemoveRoundKey(int[,] A, int[,] key)
        {
            return AddRoundKey(A, key); // Inverse of adding round key is adding the same key again
        }
        // Main method (Entry point)

    }
}
